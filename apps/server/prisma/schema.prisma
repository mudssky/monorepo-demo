// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE //正常
  INACTIVE //暂时未使用
  DISABLE //禁用
}

enum Role {
  USER
  ADMIN
}

enum FileTag {
  AVATAR //用户头像
  NOTAG //无标签，默认值,也就是临时文件
}

// 注册方式需要做一个区分
enum RegistryType {
  NORMAL //正常注册
  GITHUB //github注册
  GOOGLE //google注册
}

/// 用户表
model User {
  id             String       @id @default(uuid(7))
  /// 邮箱
  email          String?      @unique
  /// 用户名
  name           String       @unique
  nickName       String?      @unique
  /// 密码
  password       String?
  /// 用户头像
  avatarUrl      String?
  /// 角色
  role           Role         @default(USER)
  /// 用户状态
  status         UserStatus   @default(ACTIVE)
  /// 注册时间
  createdAt      DateTime     @default(now())
  /// 注册方式
  registryType   RegistryType @default(NORMAL)
  /// github id
  githubId       String?      @unique
  /// github 授权信息
  githubAuthInfo String?
  /// google id
  googleId       String?      @unique
  /// google 授权信息
  googleAuthInfo String?
  /// 用户主动添加好友的用户列表
  friends        Friendship[] @relation("friends")
  /// 用户被添加好友的用户列表
  friendBys      Friendship[] @relation("friendBys")

  @@index([id])
}

/// 好友关系表
model Friendship {
  user     User   @relation("friends", fields: [userId], references: [id])
  /// 用户id
  userId   String
  // 这里@relation后面跟的名字，指的是外键，也就是用frientId来查friendBys列表
  /// 好友用户id
  friend   User   @relation("friendBys", fields: [friendId], references: [id])
  friendId String

  @@id([userId, friendId])
}

model FriendRequest {
  id         String   @id @default(uuid(7))
  /// 请求发送者
  fromUserId String
  /// 请求接收者
  toUserId   String
  /// 添加理由
  reason     String
  // 枚举数据类型的使用
  // 1. 固定不变的场合可以使用enum，比如男女，星期等，因为枚举的调整要修改表结构，
  // 数据量大了分库分表以后，操作会很麻烦
  // 2. 大部分情况使用tinyInt 或者varchar，tinyInt在mysql中性能会更好一些，但是可读性更差
  // 还有一种char类型，类似varchar，少两个头部字节，适合枚举长度确定的情况，后续增加长度要改表结构。
  // 使用tinyInt有个技巧，就是使用类似下面这种有间隔的值，而不是连续值，方便中间插入状态
  // postgreSql中类似的类型是 SmallInt 2字节(+- 2**15) Integer 4字节 (+- 2**31)
  // 因为用SmallInt不方便迁移到其他数据库，所以还是用Int吧
  /// 请求状态 10.请求中，20.已同意，30.已拒绝
  status     Int
  // status     Int      @db.SmallInt()
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

/// 文件上传表
model UploadFiles {
  id               String   @id @default(uuid(7))
  /// 文件名
  fileName         String
  /// 原始文件名
  originalFilename String
  /// 短路径
  filePath         String
  /// 文件大小
  fileSize         Int
  /// 创建时间
  createdAt        DateTime @default(now())
  /// 更新时间
  updatedAt        DateTime @updatedAt
  /// 表示文件使用模块的标签
  fileTag          FileTag? @default(NOTAG)
}

// 短链服务

enum ShortURLStatus {
  ENABLE
  DISABLE
}

/// 短链服务表
model ShortUrl {
  id      String         @id @default(uuid(7))
  /// 压缩码启用状态
  status  ShortURLStatus @default(DISABLE)
  /// 压缩码
  code    String         @unique
  /// 原始链接
  longUrl String?        @unique

  @@index([code])
}

model MeetingRooms {
  id String @id @default(uuid(7))
}

// casbin 权限规则表
model CasbinRule {
  id    String  @id @default(uuid(7))
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}
